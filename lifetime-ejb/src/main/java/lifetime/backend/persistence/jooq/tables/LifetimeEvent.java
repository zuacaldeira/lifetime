/**
 * This class is generated by jOOQ
 */
package lifetime.backend.persistence.jooq.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.3.2" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LifetimeEvent extends org.jooq.impl.TableImpl<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord> {

	private static final long serialVersionUID = -947783046;

	/**
	 * The singleton instance of <code>lifetime.lifetime_event</code>
	 */
	public static final lifetime.backend.persistence.jooq.tables.LifetimeEvent LIFETIME_EVENT = new lifetime.backend.persistence.jooq.tables.LifetimeEvent();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord> getRecordType() {
		return lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord.class;
	}

	/**
	 * The column <code>lifetime.lifetime_event.id</code>.
	 */
	public final org.jooq.TableField<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord, java.lang.Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>lifetime.lifetime_event.title</code>.
	 */
	public final org.jooq.TableField<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord, java.lang.String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

	/**
	 * The column <code>lifetime.lifetime_event.event_start</code>.
	 */
	public final org.jooq.TableField<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord, java.sql.Date> EVENT_START = createField("event_start", org.jooq.impl.SQLDataType.DATE, this, "");

	/**
	 * The column <code>lifetime.lifetime_event.event_end</code>.
	 */
	public final org.jooq.TableField<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord, java.sql.Date> EVENT_END = createField("event_end", org.jooq.impl.SQLDataType.DATE, this, "");

	/**
	 * The column <code>lifetime.lifetime_event.status</code>.
	 */
	public final org.jooq.TableField<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord, lifetime.backend.persistence.jooq.enums.LifetimeEventStatus> STATUS = createField("status", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(lifetime.backend.persistence.jooq.enums.LifetimeEventStatus.class), this, "");

	/**
	 * The column <code>lifetime.lifetime_event.lifetime_user_id</code>.
	 */
	public final org.jooq.TableField<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord, java.lang.Integer> LIFETIME_USER_ID = createField("lifetime_user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>lifetime.lifetime_event.lifetime_org_id</code>.
	 */
	public final org.jooq.TableField<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord, java.lang.Integer> LIFETIME_ORG_ID = createField("lifetime_org_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>lifetime.lifetime_event.address_id</code>.
	 */
	public final org.jooq.TableField<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord, java.lang.Integer> ADDRESS_ID = createField("address_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>lifetime.lifetime_event</code> table reference
	 */
	public LifetimeEvent() {
		this("lifetime_event", null);
	}

	/**
	 * Create an aliased <code>lifetime.lifetime_event</code> table reference
	 */
	public LifetimeEvent(java.lang.String alias) {
		this(alias, lifetime.backend.persistence.jooq.tables.LifetimeEvent.LIFETIME_EVENT);
	}

	private LifetimeEvent(java.lang.String alias, org.jooq.Table<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord> aliased) {
		this(alias, aliased, null);
	}

	private LifetimeEvent(java.lang.String alias, org.jooq.Table<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, lifetime.backend.persistence.jooq.Lifetime.LIFETIME, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord, java.lang.Integer> getIdentity() {
		return lifetime.backend.persistence.jooq.Keys.IDENTITY_LIFETIME_EVENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord> getPrimaryKey() {
		return lifetime.backend.persistence.jooq.Keys.KEY_LIFETIME_EVENT_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord>>asList(lifetime.backend.persistence.jooq.Keys.KEY_LIFETIME_EVENT_PRIMARY, lifetime.backend.persistence.jooq.Keys.KEY_LIFETIME_EVENT_ID_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.ForeignKey<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord, ?>> getReferences() {
		return java.util.Arrays.<org.jooq.ForeignKey<lifetime.backend.persistence.jooq.tables.records.LifetimeEventRecord, ?>>asList(lifetime.backend.persistence.jooq.Keys.FK_LIFETIME_EVENT_LIFETIME_USER1, lifetime.backend.persistence.jooq.Keys.FK_LIFETIME_EVENT_LIFETIME_ORG1, lifetime.backend.persistence.jooq.Keys.FK_LIFETIME_EVENT_ADDRESS1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public lifetime.backend.persistence.jooq.tables.LifetimeEvent as(java.lang.String alias) {
		return new lifetime.backend.persistence.jooq.tables.LifetimeEvent(alias, this);
	}

	/**
	 * Rename this table
	 */
	public lifetime.backend.persistence.jooq.tables.LifetimeEvent rename(java.lang.String name) {
		return new lifetime.backend.persistence.jooq.tables.LifetimeEvent(name, null);
	}
}

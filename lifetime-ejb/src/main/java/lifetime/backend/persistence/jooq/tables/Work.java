/**
 * This class is generated by jOOQ
 */
package lifetime.backend.persistence.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lifetime.backend.persistence.jooq.Keys;
import lifetime.backend.persistence.jooq.Lifetime;
import lifetime.backend.persistence.jooq.tables.records.WorkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Work extends TableImpl<WorkRecord> {

    private static final long serialVersionUID = 686740294;

    /**
     * The reference instance of <code>lifetime.work</code>
     */
    public static final Work WORK = new Work();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkRecord> getRecordType() {
        return WorkRecord.class;
    }

    /**
     * The column <code>lifetime.work.id</code>.
     */
    public final TableField<WorkRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lifetime.work.workcol</code>.
     */
    public final TableField<WorkRecord, String> WORKCOL = createField("workcol", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

    /**
     * The column <code>lifetime.work.lifetime_event_id</code>.
     */
    public final TableField<WorkRecord, Integer> LIFETIME_EVENT_ID = createField("lifetime_event_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>lifetime.work</code> table reference
     */
    public Work() {
        this("work", null);
    }

    /**
     * Create an aliased <code>lifetime.work</code> table reference
     */
    public Work(String alias) {
        this(alias, WORK);
    }

    private Work(String alias, Table<WorkRecord> aliased) {
        this(alias, aliased, null);
    }

    private Work(String alias, Table<WorkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lifetime.LIFETIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<WorkRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WORK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WorkRecord> getPrimaryKey() {
        return Keys.KEY_WORK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WorkRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkRecord>>asList(Keys.KEY_WORK_PRIMARY, Keys.KEY_WORK_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<WorkRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WorkRecord, ?>>asList(Keys.FK_WORK_LIFETIME_EVENT1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Work as(String alias) {
        return new Work(alias, this);
    }

    /**
     * Rename this table
     */
    public Work rename(String name) {
        return new Work(name, null);
    }
}

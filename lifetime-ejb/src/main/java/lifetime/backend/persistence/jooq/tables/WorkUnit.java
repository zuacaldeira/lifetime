/**
 * This class is generated by jOOQ
 */
package lifetime.backend.persistence.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import lifetime.backend.persistence.jooq.Keys;
import lifetime.backend.persistence.jooq.Lifetime;
import lifetime.backend.persistence.jooq.tables.records.WorkUnitRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkUnit extends TableImpl<WorkUnitRecord> {

    private static final long serialVersionUID = -289528954;

    /**
     * The reference instance of <code>lifetime.work_unit</code>
     */
    public static final WorkUnit WORK_UNIT = new WorkUnit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkUnitRecord> getRecordType() {
        return WorkUnitRecord.class;
    }

    /**
     * The column <code>lifetime.work_unit.id</code>.
     */
    public final TableField<WorkUnitRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lifetime.work_unit.know_how_unit_id</code>.
     */
    public final TableField<WorkUnitRecord, Integer> KNOW_HOW_UNIT_ID = createField("know_how_unit_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lifetime.work_unit.task_id</code>.
     */
    public final TableField<WorkUnitRecord, Integer> TASK_ID = createField("task_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>lifetime.work_unit</code> table reference
     */
    public WorkUnit() {
        this("work_unit", null);
    }

    /**
     * Create an aliased <code>lifetime.work_unit</code> table reference
     */
    public WorkUnit(String alias) {
        this(alias, WORK_UNIT);
    }

    private WorkUnit(String alias, Table<WorkUnitRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkUnit(String alias, Table<WorkUnitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lifetime.LIFETIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<WorkUnitRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WORK_UNIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WorkUnitRecord> getPrimaryKey() {
        return Keys.KEY_WORK_UNIT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WorkUnitRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkUnitRecord>>asList(Keys.KEY_WORK_UNIT_PRIMARY, Keys.KEY_WORK_UNIT_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<WorkUnitRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WorkUnitRecord, ?>>asList(Keys.FK_WORK_UNIT_KNOW_HOW_UNIT1, Keys.FK_WORK_UNIT_TASK1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkUnit as(String alias) {
        return new WorkUnit(alias, this);
    }

    /**
     * Rename this table
     */
    public WorkUnit rename(String name) {
        return new WorkUnit(name, null);
    }
}
